import replicate
import streamlit as st
import requests
import zipfile
import io
from utils import icon
from streamlit_image_select import image_select

# UI configurations
st.set_page_config(page_title="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Replicate",
                   page_icon=":bridge_at_night:",
                   layout="wide")
icon.show_icon(":foggy:")
st.markdown("# :rainbow[–°—Ç—É–¥–∏—è –¢–µ–∫—Å—Ç-–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]")

# API Tokens and endpoints from `.streamlit/secrets.toml` file
REPLICATE_API_TOKEN = st.secrets["REPLICATE_API_TOKEN"]
REPLICATE_MODEL_ENDPOINTSTABILITY = st.secrets["REPLICATE_MODEL_ENDPOINTSTABILITY"]

# Resources text, link, and logo
replicate_text = "–ú–æ–¥–µ–ª—å Stability AI SDXL –Ω–∞ Replicate"
replicate_link = "https://replicate.com/stability-ai/sdxl"
replicate_logo = "friends.png"

# Placeholders for images and gallery
generated_images_placeholder = st.empty()
gallery_placeholder = st.empty()


def configure_sidebar() -> None:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.

    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Streamlit, 
    –≤–∫–ª—é—á–∞—è —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ —Ä–∞–∑–¥–µ–ª —Ä–µ—Å—É—Ä—Å–æ–≤.
    """
    with st.sidebar:
        with st.form("my_form"):
            st.info("**–ù–∞—á–Ω–∏—Ç–µ –∑–¥–µ—Å—å ‚Üì**", icon="üëãüèæ")
            with st.expander(":rainbow[**–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–≤–æ–¥–∞**]"):
                # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–ª—è –ª—é–±–æ–ø—ã—Ç–Ω—ã—Ö —É–º–Ω–∏–∫–æ–≤!)
                width = st.number_input("–®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", value=1024)
                height = st.number_input("–í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", value=1024)
                num_outputs = st.slider(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", value=1, min_value=1, max_value=4)
                scheduler = st.selectbox('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫', ('DDIM', 'DPMSolverMultistep', 'HeunDiscrete',
                                                       'KarrasDPM', 'K_EULER_ANCESTRAL', 'K_EULER', 'PNDM'))
                num_inference_steps = st.slider(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–µ–Ω–æ–π–∑–∏–Ω–≥–∞", value=50, min_value=1, max_value=500)
                guidance_scale = st.slider(
                    "–ú–∞—Å—à—Ç–∞–± –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä-–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", value=7.5, min_value=1.0, max_value=50.0, step=0.1)
                prompt_strength = st.slider(
                    "–°–∏–ª–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ img2img/inpaint (1.0 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–Ω–æ–π —É—Ç—Ä–∞—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏)", value=0.8, max_value=1.0, step=0.1)
                refine = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å —É—Ç–æ—á–Ω–µ–Ω–∏—è (–æ—Å—Ç–∞–≤–∏–ª–∏ —Ç–æ–ª—å–∫–æ 2)", ("expert_ensemble_refiner", "None"))
                high_noise_frac = st.slider(
                    "–î–æ–ª—è —à—É–º–∞ –¥–ª—è `expert_ensemble_refiner`", value=0.8, max_value=1.0, step=0.1)
            prompt = st.text_area(
                ":orange[**–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å: –Ω–∞—á–Ω–∏—Ç–µ –ø–µ—á–∞—Ç–∞—Ç—å**]",
                value="–ê—Å—Ç—Ä–æ–Ω–∞–≤—Ç, —Å–∫–∞—á—É—â–∏–π –Ω–∞ —Ä–∞–¥—É–≥–µ –µ–¥–∏–Ω–æ—Ä–æ–≥–∞, –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–π, –¥—Ä–∞–º–∞—Ç–∏—á–Ω—ã–π")
            negative_prompt = st.text_area(":orange[**–ß—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏?**]",
                                           value="–∞–±—Å–æ–ª—é—Ç–Ω–æ —Ö—É–¥—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –∏—Å–∫–∞–∂–µ–Ω–Ω—ã–µ —á–µ—Ä—Ç—ã",
                                           help="–≠—Ç–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞, —É–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏")

            # –ö–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
            submitted = st.form_submit_button(
                "–û—Ç–ø—Ä–∞–≤–∏—Ç—å", type="primary", use_container_width=True)

        # Credits and resources
        st.divider()
        st.markdown(
            ":orange[**–†–µ—Å—É—Ä—Å—ã:**]  \n"
            f"<img src='{replicate_logo}' style='height: 1em'> [{replicate_text}]({replicate_link})",
            unsafe_allow_html=True
        )
        st.markdown(
            """
            ---
            –°–ª–µ–¥–∏—Ç–µ –∑–∞ –º–Ω–æ–π –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö:

            ùïè ‚Üí [@tonykipkemboi](https://twitter.com/tonykipkemboi)

            LinkedIn ‚Üí [Tony Kipkemboi](https://www.linkedin.com/in/tonykipkemboi)

            """
        )

        return submitted, width, height, num_outputs, scheduler, num_inference_steps, guidance_scale, prompt_strength, refine, high_noise_frac, prompt, negative_prompt


def main_page(submitted: bool, width: int, height: int, num_outputs: int,
              scheduler: str, num_inference_steps: int, guidance_scale: float,
              prompt_strength: float, refine: str, high_noise_frac: float,
              prompt: str, negative_prompt: str) -> None:
    """–û—Å–Ω–æ–≤–Ω–æ–π –º–∞–∫–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

    Args:
        submitted (bool): –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –±—ã–ª–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ–æ—Ä–º–∞.
        width (int): –®–∏—Ä–∏–Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        height (int): –í—ã—Å–æ—Ç–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        num_outputs (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞.
        scheduler (str): –¢–∏–ø –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –º–æ–¥–µ–ª–∏.
        num_inference_steps (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–µ–Ω–æ–π–∑–∏–Ω–≥–∞.
        guidance_scale (float): –ú–∞—Å—à—Ç–∞–± –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä-–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        prompt_strength (float): –°–∏–ª–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ img2img/inpaint.
        refine (str): –°—Ç–∏–ª—å —É—Ç–æ—á–Ω–µ–Ω–∏—è.
        high_noise_frac (float): –î–æ–ª—è —à—É–º–∞ –¥–ª—è `expert_ensemble_refiner`.
        prompt (str): –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        negative_prompt (str): –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏–∑–±–µ–∂–∞—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.
    """
    if submitted:
        with st.status('üë©üèæ‚Äçüç≥ –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤–∞—à–∏ —Å–ª–æ–≤–∞ –≤ –∏—Å–∫—É—Å—Å—Ç–≤–æ...', expanded=True) as status:
            st.write("‚öôÔ∏è –ú–æ–¥–µ–ª—å –∑–∞–ø—É—â–µ–Ω–∞")
            st.write("üôÜ‚Äç‚ôÄÔ∏è –†–∞–∑–æ–º–Ω–∏—Ç–µ—Å—å –ø–æ–∫–∞ –∂–¥–µ—Ç–µ")
            try:
                # –í—ã–∑–æ–≤ API —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
                if submitted:
                    # –í—ã–∑–æ–≤ API replicate –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    with generated_images_placeholder.container():
                        all_images = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                        output = replicate.run(
                            REPLICATE_MODEL_ENDPOINTSTABILITY,
                            input={
                                "prompt": prompt,
                                "width": width,
                                "height": height,
                                "num_outputs": num_outputs,
                                "scheduler": scheduler,
                                "num_inference_steps": num_inference_steps,
                                "guidance_scale": guidance_scale,
                                "prompt_stregth": prompt_strength,
                                "refine": refine,
                                "high_noise_frac": high_noise_frac
                            }
                        )
                        if output:
                            st.toast(
                                '–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!', icon='üòç')
                            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–∞–Ω—Å–∞
                            st.session_state.generated_image = output

                            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            for image in st.session_state.generated_image:
                                with st.container():
                                    st.image(image, caption="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üéà",
                                             use_column_width=True)
                                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫
                                    all_images.append(image)

                                    response = requests.get(image)
                        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–∞–Ω—Å–∞
                        st.session_state.all_images = all_images

                        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ BytesIO
                        zip_io = io.BytesIO()

                        # –û–ø—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        with zipfile.ZipFile(zip_io, 'w') as zipf:
                            for i, image in enumerate(st.session_state.all_images):
                                response = requests.get(image)
                                if response.status_code == 200:
                                    image_data = response.content
                                    # –ó–∞–ø–∏—Å—å –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ zip-—Ñ–∞–π–ª —Å –∏–º–µ–Ω–µ–º
                                    zipf.writestr(
                                        f"output_file_{i+1}.png", image_data)
                                else:
                                    st.error(
                                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1} —Å {image}. –ö–æ–¥ –æ—à–∏–±–∫–∏: {response.status_code}", icon="üö®")
                        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è zip-—Ñ–∞–π–ª–∞
                        st.download_button(
                            ":red[**–°–∫–∞—á–∞—Ç—å –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è**]", data=zip_io.getvalue(), file_name="output_files.zip", mime="application/zip", use_container_width=True)
                status.update(label="‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
                              state="complete", expanded=False)
            except Exception as e:
                print(e)
                st.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}', icon="üö®")

    # –ï—Å–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Ä–∞—Å—Å–ª–∞–±—å—Ç–µ—Å—å üçπ
    else:
        pass

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–∞–ª–µ—Ä–µ–∏ –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è
    with gallery_placeholder.container():
        img = image_select(
            label="–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å? –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ! üòâ",
            images=[
                "gallery/farmer_sunset.png", "gallery/astro_on_unicorn.png",
                "gallery/friends.png", "gallery/wizard.png", "gallery/puppy.png",
                "gallery/cheetah.png", "gallery/viking.png",
            ],
            captions=["–§–µ—Ä–º–µ—Ä –Ω–∞ –∑–∞–∫–∞—Ç–µ, –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–π, –¥—Ä–∞–º–∞—Ç–∏—á–Ω—ã–π",
                      "–ê—Å—Ç—Ä–æ–Ω–∞–≤—Ç, —Å–∫–∞—á—É—â–∏–π –Ω–∞ —Ä–∞–¥—É–≥–µ –µ–¥–∏–Ω–æ—Ä–æ–≥–∞, –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–π, –¥—Ä–∞–º–∞—Ç–∏—á–Ω—ã–π",
                      "–ì—Ä—É–ø–ø–∞ –¥—Ä—É–∑–µ–π —Å–º–µ–µ—Ç—Å—è –∏ —Ç–∞–Ω—Ü—É–µ—Ç –Ω–∞ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–º —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ, —Ä–∞–¥–æ—Å—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, 35–º–º –ø–ª–µ–Ω–æ—á–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è",
                      "–í–æ–ª—à–µ–±–Ω–∏–∫, —Ç–≤–æ—Ä—è—â–∏–π –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ, –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è –º–∞–≥–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è, –∏—Å—Ö–æ–¥—è—â–∞—è –∏–∑ –µ–≥–æ —Ä—É–∫, —á—Ä–µ–∑–≤—ã—á–∞–π–Ω–æ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–∞–Ω—Ç–∞–∑–∏–π–Ω–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è",
                      "–ú–∏–ª—ã–π —â–µ–Ω–æ–∫, –∏–≥—Ä–∞—é—â–∏–π –≤ –ø–æ–ª–µ —Ü–≤–µ—Ç–æ–≤, –º–∞–ª–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∑–∫–æ—Å—Ç–∏, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è Canon",
                      "–ú–∞—Ç—å-–≥–µ–ø–∞—Ä–¥ –∫–æ—Ä–º–∏—Ç —Å–≤–æ–∏—Ö –¥–µ—Ç–µ–Ω—ã—à–µ–π –≤ –≤—ã—Å–æ–∫–æ–π —Ç—Ä–∞–≤–µ –°–µ—Ä–µ–Ω–≥–µ—Ç–∏. –†–∞–Ω–Ω–µ–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–ª–Ω—Ü–µ –ø—Ä–æ–±–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Ç—Ä–∞–≤—É. –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è National Geographic –æ—Ç –§—Ä–∞–Ω—Å–∞ –õ–∞–Ω—Ç–∏–Ω–∞",
                      "–ü–æ—Ä—Ç—Ä–µ—Ç –≤–∏–∫–∏–Ω–≥–∞-–±–æ—Ä–æ–¥–∞—á–∞ –≤ —à–ª–µ–º–µ —Å —Ä–æ–≥–∞–º–∏. –û–Ω –ø—Ä–∏—Å—Ç–∞–ª—å–Ω–æ —Å–º–æ—Ç—Ä–∏—Ç –≤–¥–∞–ª—å, –¥–µ—Ä–∂–∞ –±–æ–µ–≤–æ–π —Ç–æ–ø–æ—Ä. –î—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, —Ü–∏—Ñ—Ä–æ–≤–∞—è –º–∞—Å–ª—è–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å",
                      ],
            use_container_width=True
        )


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Streamlit.

    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∏ –º–∞–∫–µ—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    –û–Ω–∞ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –≤–≤–æ–¥—ã —Å –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –∏—Ö –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞—Ç–µ–º –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –≤–≤–æ–¥–æ–≤.
    """
    submitted, width, height, num_outputs, scheduler, num_inference_steps, guidance_scale, prompt_strength, refine, high_noise_frac, prompt, negative_prompt = configure_sidebar()
    main_page(submitted, width, height, num_outputs, scheduler, num_inference_steps,
              guidance_scale, prompt_strength, refine, high_noise_frac, prompt, negative_prompt)


if __name__ == "__main__":
    main()
